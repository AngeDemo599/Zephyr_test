[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Client Listing",
  "enabled": 1,
  "modified": "2024-11-04 09:58:12.805196",
  "module": "Kb Distribution",
  "name": "pre vente client list",
  "script": "frappe.ui.form.on('Client Listing', {\r\n    refresh(frm) {\r\n        // Store user coordinates globally\r\n        frm.user_coordinates = {\r\n            latitude: null,\r\n            longitude: null\r\n        };\r\n\r\n        // Store user's sectors globally\r\n        frm.user_sectors = [];\r\n\r\n        // Get user's location\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                function(position) {\r\n                    frm.user_coordinates.latitude = position.coords.latitude;\r\n                    frm.user_coordinates.longitude = position.coords.longitude;\r\n                    console.log(\"Got user location:\", frm.user_coordinates);\r\n                },\r\n                function(error) {\r\n                    console.log(\"Geolocation error:\", error);\r\n                    // Fallback coordinates (Oran, Algeria)\r\n                    frm.user_coordinates.latitude = 35.6985752;\r\n                    frm.user_coordinates.longitude = -0.6181506;\r\n                }\r\n            );\r\n        } else {\r\n            // Fallback if geolocation is not available\r\n            frm.user_coordinates.latitude = 35.6985752;\r\n            frm.user_coordinates.longitude = -0.6181506;\r\n        }\r\n\r\n        // Fetch the secteur_client values for the current user\r\n        if (frappe.session.user) {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"User\",\r\n                    name: frappe.session.user,\r\n                    async: true\r\n                },\r\n                callback: (response) => {\r\n                    if (response.message && response.message.secteur_client) {\r\n                        const secteur_client_entries = response.message.secteur_client;\r\n                        const secteurs = [];\r\n                        secteur_client_entries.forEach(entry => {\r\n                            if (entry.sécteur) {\r\n                                secteurs.push(entry.sécteur);\r\n                            }\r\n                        });\r\n\r\n                        if (secteurs.length > 0) {\r\n                            frm.user_sectors = secteurs; // Store user's sectors\r\n                            getCustomersBySecteurs(secteurs);\r\n                            populateSecteurDropdown(secteurs);\r\n                        } else {\r\n                            console.log(\"No secteurs found for user: \", frappe.session.user);\r\n                        }\r\n                    } else {\r\n                        console.log(\"No secteur_client field found for the user.\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Search bar and filter dropdown setup\r\n        if (!frm.page.custom_top_bar) {\r\n            const $topBar = $(`\r\n                <div class=\"custom-top-bar\" style=\"\r\n    position: fixed;\r\n    top: 47px;\r\n    left: 0;\r\n    right: 0;\r\n    background: rgba(255, 255, 255, 0.98);\r\n    backdrop-filter: blur(10px);\r\n    z-index: 1000;\r\n    padding: 12px 16px;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\">\r\n    <input type=\"text\" id=\"search-bar\" style=\"\r\n        width: 60%;\r\n        padding: 8px 12px;\r\n        border-radius: 8px;\r\n        border: 1px solid #e2e2e2;\r\n        background: rgba(142, 142, 147, 0.12);\r\n        font-size: 14px;\r\n        outline: none;\r\n        transition: all 0.2s ease;\r\n        color: #1d1d1f;\" \r\n        placeholder=\"Search...\"/>\r\n    <select id=\"secteur-filter\" style=\"\r\n        width: 35%;\r\n        padding: 8px 12px;\r\n        border-radius: 8px;\r\n        border: 1px solid #e2e2e2;\r\n        background: rgba(142, 142, 147, 0.12);\r\n        font-size: 14px;\r\n        outline: none;\r\n        cursor: pointer;\r\n        appearance: none;\r\n        -webkit-appearance: none;\r\n        background-image: url('data:image/svg+xml;utf8,<svg fill=\\'%23000000\\' height=\\'24\\' viewBox=\\'0 0 24 24\\' width=\\'24\\' xmlns=\\'http://www.w3.org/2000/svg\\'><path d=\\'M7 10l5 5 5-5z\\'/></svg>');\r\n        background-repeat: no-repeat;\r\n        background-position: right 8px center;\r\n        padding-right: 30px;\r\n        color: #1d1d1f;\">\r\n        <option value=\"all\">All Secteurs</option>\r\n    </select>\r\n</div>\r\n            `);\r\n\r\n            frm.page.wrapper.prepend($topBar);\r\n            frm.page.custom_top_bar = $topBar;\r\n\r\n            $('#search-bar').on('input', function() {\r\n                const query = $(this).val().toLowerCase();\r\n                const selectedSecteur = $('#secteur-filter').val();\r\n                filterCustomers(query, selectedSecteur);\r\n            });\r\n\r\n            $('#secteur-filter').on('change', function() {\r\n                const selectedSecteur = $(this).val();\r\n                const query = $('#search-bar').val().toLowerCase();\r\n                filterCustomers(query, selectedSecteur);\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nfunction populateSecteurDropdown(userSecteurs) {\r\n    const $filter = $('#secteur-filter');\r\n    $filter.empty(); // Clear existing options\r\n    $filter.append(new Option(\"All Secteurs\", \"all\")); // Add an option to view all secteurs\r\n    userSecteurs.forEach(secteur => {\r\n        $filter.append(new Option(secteur, secteur));\r\n    });\r\n}\r\n\r\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\r\n    const R = 6371;\r\n    const dLat = (lat2 - lat1) * Math.PI / 180;\r\n    const dLon = (lon2 - lon1) * Math.PI / 180;\r\n    const a = \r\n        Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n        Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    const distance = R * c;\r\n    return Math.round(distance * 10) / 10;\r\n}\r\n\r\nfunction filterCustomers(query, selectedSecteur) {\r\n    let filters;\r\n    \r\n    // If \"all\" is selected, show all customers from user's sectors\r\n    if (selectedSecteur === 'all') {\r\n        filters = {\r\n            secteur_client: [\"in\", cur_frm.user_sectors]\r\n        };\r\n    } else {\r\n        // If specific sector is selected, show only that sector\r\n        filters = {\r\n            secteur_client: selectedSecteur\r\n        };\r\n    }\r\n\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Customer',\r\n            fields: ['name', 'customer_name', 'secteur_client', 'geo_latitude', 'geo_longitude'],\r\n            filters: filters,\r\n            limit_page_length: 9999\r\n        },\r\n        callback: function(response) {\r\n            const customers = response.message || [];\r\n\r\n            // Apply search filter and calculate distances\r\n            const filteredCustomers = customers\r\n                .filter(customer => customer.customer_name.toLowerCase().includes(query))\r\n                .map(customer => ({\r\n                    ...customer,\r\n                    distance: calculateDistance(\r\n                        cur_frm.user_coordinates.latitude,\r\n                        cur_frm.user_coordinates.longitude,\r\n                        parseFloat(customer.geo_latitude) || 0,\r\n                        parseFloat(customer.geo_longitude) || 0\r\n                    )\r\n                }))\r\n                .sort((a, b) => a.distance - b.distance); // Sort by distance\r\n\r\n            displayCustomerCards(filteredCustomers);\r\n        }\r\n    });\r\n}\r\n\r\nfunction getCustomersBySecteurs(userSecteurs) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Customer',\r\n            fields: ['name', 'customer_name', 'secteur_client', 'geo_latitude', 'geo_longitude'],\r\n            filters: {\r\n                secteur_client: [\"in\", userSecteurs]\r\n            },\r\n            limit_page_length: 9999\r\n        },\r\n        callback: function(response) {\r\n            const customers = response.message;\r\n            if (customers) {\r\n                // Calculate distances and sort before displaying\r\n                const customersWithDistance = customers\r\n                    .map(customer => ({\r\n                        ...customer,\r\n                        distance: calculateDistance(\r\n                            cur_frm.user_coordinates.latitude,\r\n                            cur_frm.user_coordinates.longitude,\r\n                            parseFloat(customer.geo_latitude) || 0,\r\n                            parseFloat(customer.geo_longitude) || 0\r\n                        )\r\n                    }))\r\n                    .sort((a, b) => a.distance - b.distance);\r\n\r\n                displayCustomerCards(customersWithDistance);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction displayCustomerCards(customers) {\r\n    const container = document.getElementById('article-container');\r\n    container.innerHTML = '';\r\n\r\n    customers.forEach(customer => {\r\n        const card = document.createElement('div');\r\n        card.className = 'article-card';\r\n        card.style.position = 'relative';\r\n        \r\n        // Determine badge color based on distance\r\n        const badgeColor = customer.distance > 10 ? '#FF4444' : '#4CAF50';\r\n        \r\n        card.innerHTML = `\r\n            <div class=\"distance-badge\" style=\"\r\n                position: absolute;\r\n                top: 10px;\r\n                right: 10px;\r\n                background-color: ${badgeColor};\r\n                color: white;\r\n                padding: 5px 10px;\r\n                border-radius: 15px;\r\n                font-size: 10px;\r\n                font-weight: bold;\r\n                box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n                transition: background-color 0.3s ease;\r\n            \">\r\n                ${customer.distance} km\r\n            </div>\r\n            <div class=\"item_information\">\r\n                <h3>${customer.customer_name}</h3>\r\n                <p>ID: ${customer.name}</p>\r\n                <p>Secteur: ${customer.secteur_client || 'Non spécifié'}</p>\r\n            </div>\r\n            <button class=\"map-button\" style=\"\r\n                position: absolute;\r\n                bottom: 10px;\r\n                right: 10px;\r\n                background-color: #4285F4;\r\n                color: white;\r\n                border: none;\r\n                padding: 8px 12px;\r\n                border-radius: 5px;\r\n                cursor: pointer;\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 5px;\r\n                box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n                transition: background-color 0.3s ease;\r\n            \">\r\n                <i class=\"fa fa-map-marker\"></i>\r\n                Directions\r\n            </button>\r\n        `;\r\n\r\n        // Add click event for the entire card (existing functionality)\r\n        card.querySelector('.item_information').addEventListener('click', () => {\r\n            createInvoiceForCustomer(customer.name, customer.customer_name);\r\n        });\r\n\r\n        // Add click event for the map button\r\n        card.querySelector('.map-button').addEventListener('click', (e) => {\r\n            e.stopPropagation(); // Prevent card click event from triggering\r\n            openDirections(\r\n                cur_frm.user_coordinates.latitude,\r\n                cur_frm.user_coordinates.longitude,\r\n                customer.geo_latitude,\r\n                customer.geo_longitude\r\n            );\r\n        });\r\n\r\n        container.appendChild(card);\r\n    });\r\n}\r\n\r\nfunction openDirections(startLat, startLng, endLat, endLng) {\r\n    // Check if the user is on a mobile device\r\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n    \r\n    // Create the Google Maps URL for directions\r\n    const mapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLng}&destination=${endLat},${endLng}&travelmode=driving`;\r\n    \r\n    if (isMobile) {\r\n        // Try to open in Google Maps app first\r\n        window.location.href = `comgooglemaps://?saddr=${startLat},${startLng}&daddr=${endLat},${endLng}&directionsmode=driving`;\r\n        \r\n        // Set a timeout to open in browser if the app doesn't open\r\n        setTimeout(() => {\r\n            window.location.href = mapsUrl;\r\n        }, 1000);\r\n    } else {\r\n        // Open in new tab on desktop\r\n        window.open(mapsUrl, '_blank');\r\n    }\r\n}\r\n\r\nfunction createInvoiceForCustomer(customerId) {\r\n    localStorage.setItem('customer_id', customerId);\r\n    window.location.href = `/app/pre-commande/new`;\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pre-Commande",
  "enabled": 1,
  "modified": "2024-11-04 09:58:12.767419",
  "module": "Kb Distribution",
  "name": "pre commande",
  "script": "// Function to increase item quantity\r\nfunction increaseQty(item_code) {\r\n    const qtyElement = document.getElementById(`qty-${item_code}`);\r\n    let qty = parseInt(qtyElement.value) || 0;\r\n    qty++;\r\n    qtyElement.value = qty;\r\n    updatePackDisplay(qtyElement);\r\n}\r\n\r\n// Function to decrease item quantity\r\nfunction decreaseQty(item_code) {\r\n    const qtyElement = document.getElementById(`qty-${item_code}`);\r\n    let qty = parseInt(qtyElement.value) || 0;\r\n    if (qty > 0) {\r\n        qty--;\r\n        qtyElement.value = qty;\r\n        updatePackDisplay(qtyElement);\r\n    }\r\n}\r\n\r\n// Function to update the pack display\r\nfunction updatePackDisplay(inputElement) {\r\n    const totalUnits = parseInt(inputElement.value) || 0;\r\n    const colisage = parseInt(inputElement.getAttribute('data-colisage')) || 6; // Default to 6 if not set\r\n    const { packs, remainingUnits } = calculatePacks(totalUnits, colisage);\r\n    \r\n    const packCalculation = inputElement\r\n        .closest('.quantity-selector')\r\n        .querySelector('.pack-calculation');\r\n\r\n    if (totalUnits === 0) {\r\n        packCalculation.textContent = `0 packs (${colisage}) + 0 unités`;\r\n    } else if (packs === 0) {\r\n        packCalculation.textContent = `${remainingUnits} unités`;\r\n    } else if (remainingUnits === 0) {\r\n        packCalculation.textContent = `${packs} packs (${colisage})`;\r\n    } else {\r\n        packCalculation.textContent = `${packs} packs (${colisage}) + ${remainingUnits} unités`;\r\n    }\r\n}\r\n\r\n// Function to calculate packs and remaining units\r\nfunction calculatePacks(totalUnits, colisage) {\r\n    const unitsPerPack = colisage || 6; // Use colisage, default to 6 if not provided\r\n    const packs = Math.floor(totalUnits / unitsPerPack);\r\n    const remainingUnits = totalUnits % unitsPerPack;\r\n\r\n    return { packs, remainingUnits };\r\n}\r\n\r\nfrappe.ui.form.on('Pre-Commande', {\r\n    refresh(frm) {\r\n        // Fetch items when the form loads\r\n        \r\n        // Check if this is a new form\r\n        if (frm.is_new()) {\r\n            // Retrieve the customerId from local storage\r\n            let customerId = localStorage.getItem('customer_id');\r\n            if (customerId) {\r\n                // Set the 'client' field to the customerId value\r\n                frm.set_value('client', customerId);\r\n\r\n                // Clear the stored customerId after setting\r\n                localStorage.removeItem('customer_id');\r\n            }\r\n        }\r\n        \r\n        fetchItems();\r\n\r\n        // Set up event listeners for buttons or elements\r\n        document.getElementById('create-order').addEventListener('click', createOrder);\r\n        document.getElementById('custom-famille').addEventListener('change', filterItems);\r\n    }\r\n});\r\n\r\n// Function to fetch items and populate the filter\r\nfunction fetchItems() {\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Item',\r\n            fields: ['item_name', 'item_code', 'description', 'image', 'custom_famille', 'colisage'],\r\n            limit_page_length: 9999\r\n        },\r\n        callback: function(response) {\r\n            const items = response.message;\r\n            if (items) {\r\n                renderItems(items);\r\n                populateFilter(items);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Function to populate the filter options\r\nfunction populateFilter(items) {\r\n    const filterSelect = document.getElementById('custom-famille');\r\n    const uniqueFamilles = [...new Set(items.map(item => item.custom_famille))];\r\n\r\n    filterSelect.innerHTML = '<option value=\"\">All</option>';\r\n\r\n    uniqueFamilles.forEach(famille => {\r\n        const option = document.createElement('option');\r\n        option.value = famille;\r\n        option.textContent = famille;\r\n        filterSelect.appendChild(option);\r\n    });\r\n}\r\n\r\n// Function to filter items based on the selected famille\r\nfunction filterItems() {\r\n    const selectedFamille = document.getElementById('custom-famille').value;\r\n    const allCards = document.querySelectorAll('.article-card');\r\n\r\n    allCards.forEach(card => {\r\n        const itemFamille = card.getAttribute('data-famille');\r\n        card.style.display = (selectedFamille === '' || itemFamille === selectedFamille) ? 'flex' : 'none';\r\n    });\r\n}\r\n\r\n// Function to render items in the UI\r\nfunction renderItems(items) {\r\n    const container = document.getElementById('article-container');\r\n    container.innerHTML = ''; // Clear previous content\r\n\r\n    items.forEach(item => {\r\n        const colisage = item.colisage || 6; // Default colisage value if not provided\r\n        const card = document.createElement('div');\r\n        card.className = 'article-card';\r\n        card.setAttribute('data-famille', item.custom_famille);\r\n        card.innerHTML = `\r\n            <img src=\"${item.image || '/path/to/default/image.png'}\" alt=\"${item.item_name}\" class=\"item-image\">\r\n            <div class=\"item-information\">\r\n            \r\n\r\n                <div class=\"quantity-selector\">\r\n                                <div class=\"item-details\">\r\n                    <h3>${item.item_name}</h3>\r\n                    <p>${item.custom_famille || 'No description available'}</p>\r\n                </div>\r\n                    <div class=\"pack-info\">\r\n                        <span class=\"pack-calculation\">0 packs (${colisage}) + 0 unités</span>\r\n                    </div>\r\n                    <div class=\"qty-controls\">\r\n                        <button class=\"decrease-btn\" data-item-code=\"${item.item_code}\">-</button>\r\n                        <div class=\"qty-input-container\">\r\n                            <input type=\"number\" class=\"qty-input\" id=\"qty-${item.item_code}\" data-colisage=\"${colisage}\">\r\n                            <span class=\"qty-label\">unités</span>\r\n                        </div>\r\n                        <button class=\"increase-btn\" data-item-code=\"${item.item_code}\">+</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        container.appendChild(card);\r\n    });\r\n\r\n    // Attach event listeners to buttons and inputs\r\n    document.querySelectorAll('.increase-btn').forEach(button => {\r\n        button.addEventListener('click', function() {\r\n            const itemCode = this.getAttribute('data-item-code');\r\n            increaseQty(itemCode);\r\n        });\r\n    });\r\n\r\n    document.querySelectorAll('.decrease-btn').forEach(button => {\r\n        button.addEventListener('click', function() {\r\n            const itemCode = this.getAttribute('data-item-code');\r\n            decreaseQty(itemCode);\r\n        });\r\n    });\r\n\r\n    document.querySelectorAll('.qty-input').forEach(input => {\r\n        input.addEventListener('input', function() {\r\n            updatePackDisplay(this);\r\n        });\r\n    });\r\n}\r\n\r\nfunction createOrder() {\r\n    const items = [];\r\n    document.querySelectorAll('.qty-controls').forEach(control => {\r\n        const itemCode = control.querySelector('.increase-btn').getAttribute('data-item-code');\r\n        const qty = parseInt(document.getElementById(`qty-${itemCode}`).value) || 0;\r\n        if (qty > 0) {\r\n            items.push({ item_code: itemCode, qty });\r\n        }\r\n    });\r\n    \r\n    if (items.length === 0) {\r\n        frappe.msgprint('Please select at least one item with a quantity greater than 0.');\r\n        return;\r\n    }\r\n\r\n    // Create and show the date selection dialog with custom styling and price list toggle\r\n    const d = new frappe.ui.Dialog({\r\n        title: 'Select Delivery Date',\r\n        fields: [\r\n            {\r\n                label: 'Delivery Date',\r\n                fieldname: 'delivery_date',\r\n                fieldtype: 'Date',\r\n                reqd: 1,\r\n                default: frappe.datetime.get_today()\r\n            },\r\n            {\r\n                fieldtype: 'HTML',\r\n                fieldname: 'date_buttons',\r\n                options: `\r\n                    <div style=\"display: flex; flex-direction: column; gap: 10px; padding: 10px 0;\">\r\n                        <button class=\"btn btn-default today-btn\" style=\"width: 100%; margin: 0;\">\r\n                            Today\r\n                        </button>\r\n                        <button class=\"btn btn-default tomorrow-btn\" style=\"width: 100%; margin: 0;\">\r\n                            Tomorrow\r\n                        </button>\r\n                    </div>\r\n                `\r\n            },\r\n            {\r\n                fieldtype: 'HTML',\r\n                fieldname: 'price_list_toggle',\r\n                options: `\r\n                    <div style=\"display: flex; align-items: center; margin-top: 15px; padding: 10px 0;\">\r\n                        <label class=\"switch\" style=\"margin-right: 10px;\">\r\n                            <input type=\"checkbox\" id=\"priceListToggle\">\r\n                            <span class=\"slider round\"></span>\r\n                        </label>\r\n                        <span>Avec Facture</span>\r\n                    </div>\r\n                    <style>\r\n                        .switch {\r\n                            position: relative;\r\n                            display: inline-block;\r\n                            width: 60px;\r\n                            height: 34px;\r\n                        }\r\n                        .switch input {\r\n                            opacity: 0;\r\n                            width: 0;\r\n                            height: 0;\r\n                        }\r\n                        .slider {\r\n                            position: absolute;\r\n                            cursor: pointer;\r\n                            top: 0;\r\n                            left: 0;\r\n                            right: 0;\r\n                            bottom: 0;\r\n                            background-color: #ccc;\r\n                            transition: .4s;\r\n                        }\r\n                        .slider:before {\r\n                            position: absolute;\r\n                            content: \"\";\r\n                            height: 26px;\r\n                            width: 26px;\r\n                            left: 4px;\r\n                            bottom: 4px;\r\n                            background-color: white;\r\n                            transition: .4s;\r\n                        }\r\n                        input:checked + .slider {\r\n                            background-color: #2196F3;\r\n                        }\r\n                        input:checked + .slider:before {\r\n                            transform: translateX(26px);\r\n                        }\r\n                        .slider.round {\r\n                            border-radius: 34px;\r\n                        }\r\n                        .slider.round:before {\r\n                            border-radius: 50%;\r\n                        }\r\n                    </style>\r\n                `\r\n            }\r\n        ],\r\n        primary_action_label: 'Create Order',\r\n        primary_action(values) {\r\n            const isPrixGros = document.getElementById('priceListToggle').checked;\r\n            createSalesOrder(items, values.delivery_date, isPrixGros);\r\n            d.hide();\r\n        }\r\n    });\r\n\r\n    // Style the dialog\r\n    d.$wrapper.find('.modal-dialog').css({\r\n        'max-width': '400px'\r\n    });\r\n\r\n    // Add click handlers for Today and Tomorrow buttons\r\n    d.$wrapper.find('.today-btn').on('click', () => {\r\n        d.set_value('delivery_date', frappe.datetime.get_today());\r\n    });\r\n\r\n    d.$wrapper.find('.tomorrow-btn').on('click', () => {\r\n        const tomorrow = frappe.datetime.add_days(frappe.datetime.get_today(), 1);\r\n        d.set_value('delivery_date', tomorrow);\r\n    });\r\n\r\n    // Add some custom CSS to the dialog\r\n    d.$wrapper.find('.modal-body').css({\r\n        'padding': '20px'\r\n    });\r\n\r\n    // Style the primary action button\r\n    d.$wrapper.find('.btn-primary').css({\r\n        'margin-top': '10px',\r\n        'width': '100%'\r\n    });\r\n\r\n    d.show();\r\n}\r\n// Helper function to check stock availability\r\nfunction checkStockAvailability(items) {\r\n    return new Promise((resolve, reject) => {\r\n        // Create an array of promises for each item check\r\n        const stockChecks = items.map(item => {\r\n            return new Promise((resolveItem) => {\r\n                frappe.call({\r\n                    method: 'frappe.client.get_value',\r\n                    args: {\r\n                        doctype: 'Bin',\r\n                        filters: {\r\n                            item_code: item.item_code,\r\n                            warehouse: 'Dépôt Principal - KD' // Replace with your warehouse\r\n                        },\r\n                        fieldname: ['actual_qty']\r\n                    },\r\n                    callback: function(r) {\r\n                        if (r.message) {\r\n                            const availableQty = r.message.actual_qty || 0;\r\n                            resolveItem({\r\n                                item_code: item.item_code,\r\n                                required_qty: item.qty,\r\n                                available_qty: availableQty,\r\n                                is_available: availableQty >= item.qty\r\n                            });\r\n                        } else {\r\n                            resolveItem({\r\n                                item_code: item.item_code,\r\n                                required_qty: item.qty,\r\n                                available_qty: 0,\r\n                                is_available: false\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        // Wait for all stock checks to complete\r\n        Promise.all(stockChecks)\r\n            .then(results => {\r\n                const unavailableItems = results.filter(item => !item.is_available);\r\n                if (unavailableItems.length > 0) {\r\n                    let message = 'Insufficient stock for the following items:\\n';\r\n                    unavailableItems.forEach(item => {\r\n                        message += `\\n${item.item_code}:`;\r\n                        message += `\\nRequired: ${item.required_qty}`;\r\n                        message += `\\nAvailable: ${item.available_qty}\\n`;\r\n                    });\r\n                    reject(message);\r\n                } else {\r\n                    resolve(true);\r\n                }\r\n            });\r\n    });\r\n}\r\n\r\n// Modified createSalesOrder function to handle price list and stock check\r\nfunction createSalesOrder(items, deliveryDate, isPrixGros) {\r\n    // First check stock availability\r\n    checkStockAvailability(items)\r\n        .then(() => {\r\n            // Proceed with sales order creation if stock is available\r\n            frappe.call({\r\n                method: 'frappe.client.insert',\r\n                args: {\r\n                    doc: {\r\n                        doctype: 'Sales Order',\r\n                        customer: cur_frm.doc.client,\r\n                        items: items,\r\n                        delivery_date: deliveryDate,\r\n                        selling_price_list: isPrixGros ? 'Prix de vente avec Facture' : 'Prix de vente Détails'\r\n                    }\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        frappe.msgprint('Order created successfully!');\r\n                        \r\n                        // Get the name of the created Sales Order\r\n                        const salesOrderName = response.message.name;\r\n                        \r\n                        // Open print view in a new window\r\n                        const printUrl = frappe.urllib.get_full_url(\r\n                            '/printview?doctype=Sales Order'\r\n                            + '&name=' + encodeURIComponent(salesOrderName)\r\n                            + '&trigger_print=1'\r\n                            + '&no_letterhead=0'\r\n                        );\r\n                        \r\n                        // Open print view in a new window\r\n                        window.open(printUrl, '_blank');\r\n                        \r\n                        // Redirect to client listing\r\n                        window.location.href = `/app/client-listing/new`;\r\n                    } else {\r\n                        window.location.href = `/app/pre-commande/new`;\r\n                    }\r\n                }\r\n            });\r\n        })\r\n        .catch(errorMessage => {\r\n            // Show error message if stock is not available\r\n            frappe.msgprint({\r\n                title: __('Insufficient Stock'),\r\n                indicator: 'red',\r\n                message: errorMessage\r\n            });\r\n        });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-11-04 09:58:12.814659",
  "module": "Kb Distribution",
  "name": "NIF NIS AI RC LIMITE",
  "script": "// Ajoutez ce script comme un Custom Script pour le doctype Client\r\nfrappe.ui.form.on('Customer', {\r\n    validate: function(frm) {\r\n        // Vérification de 'custom_nif'\r\n        if (frm.doc.nif && frm.doc.nif.length < 15) {\r\n            frappe.msgprint({\r\n                title: __('Attention'),\r\n                message: __('Vous avez fait une erreur sur le NIF. Le NIF doit contenir au moins 15 chiffres.'),\r\n                indicator: 'red'\r\n            });\r\n            frappe.validated = false;\r\n            return;\r\n        }\r\n\r\n        // Vérification de 'custom_nis'\r\n        if (frm.doc.nis && frm.doc.nis.length < 15) {\r\n            frappe.msgprint({\r\n                title: __('Attention'),\r\n                message: __('Vous avez fait une erreur sur le NIS. Le NIS doit contenir au moins 15 chiffres.'),\r\n                indicator: 'red'\r\n            });\r\n            frappe.validated = false;\r\n            return;\r\n        }\r\n\r\n        // Vérification de 'custom_ai'\r\n        if (frm.doc.ai && frm.doc.ai.length !== 11) {\r\n            frappe.msgprint({\r\n                title: __('Attention'),\r\n                message: __('Vous avez fait une erreur sur le champ AI. Le champ AI doit contenir exactement 11 chiffres.'),\r\n                indicator: 'red'\r\n            });\r\n            frappe.validated = false;\r\n            return;\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-11-04 09:58:12.785387",
  "module": "Kb Distribution",
  "name": "Écriture de paiement / type de paiement",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    type_de_paiement: function(frm) {\r\n        // Lorsque le champ custom_type_de_paiement est modifié\r\n        if (frm.doc.type_de_paiement == \"Décaissement Fournisseur\") {\r\n            frm.set_value('payment_type', 'Pay');\r\n            frm.set_value('party_type', 'Supplier');  // Fournisseur\r\n        } else if (frm.doc.type_de_paiement == \"Encaissement Client\") {\r\n            frm.set_value('payment_type', 'Receive');\r\n            frm.set_value('party_type', 'Customer');  // Client\r\n        } else if (frm.doc.type_de_paiement == \"Dépôt\") {\r\n            frm.set_value('payment_type', 'Pay');\r\n            frm.set_value('party_type', 'Employee');\r\n        } else if (frm.doc.type_de_paiement == \"Dépense\") {\r\n            frm.set_value('payment_type', 'Pay');\r\n            frm.set_value('party_type', 'Employee');\r\n            frm.set_value('paid_to','Créditeurs - KD')\r\n        } else if (frm.doc.type_de_paiement == \"Virement de fonds\") {\r\n            frm.set_value('payment_type', 'Internal Transfer');\r\n            frm.set_value('party_type', '');  // Pas de party_type pour Virement de fonds\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-11-04 09:58:12.748817",
  "module": "Kb Distribution",
  "name": "SUBMIT ALL SALES ORDER OF TODAY",
  "script": "frappe.listview_settings['Sales Order'] = {\r\n    onload: function(listview) {\r\n        // First check the system setting\r\n        frappe.db.get_single_value('System Settings', 'autorisation_de_validation_quotidienne')\r\n            .then(isEnabled => {\r\n                // Only proceed if the setting is checked/enabled\r\n                if (isEnabled) {\r\n                    // Get user roles\r\n                    frappe.call({\r\n                        method: 'frappe.client.get',\r\n                        args: {\r\n                            doctype: 'User',\r\n                            name: frappe.session.user\r\n                        },\r\n                        callback: function(response) {\r\n                            if (response.message) {\r\n                                const userRoles = response.message.roles || [];\r\n                                const hasRole = userRoles.some(role => role.role === 'Sales Manager');\r\n                                \r\n                                if (hasRole) {\r\n                                    let btn = listview.page.add_inner_button(__('Valider les commande du jour'), function() {\r\n                                        // Show confirmation dialog before proceeding\r\n                                        frappe.confirm(\r\n                                            'Voulez-vous valider toutes les commandes du jour?',\r\n                                            function() {\r\n                                                // Show a loading indicator\r\n                                                frappe.show_alert({\r\n                                                    message: __('Validation des commandes en cours...'),\r\n                                                    indicator: 'blue'\r\n                                                });\r\n                                                \r\n                                                // Get current date in YYYY-MM-DD format\r\n                                                let today = frappe.datetime.get_today();\r\n                                                \r\n                                                // Find all draft sales orders from today\r\n                                                frappe.call({\r\n                                                    method: 'frappe.client.get_list',\r\n                                                    args: {\r\n                                                        doctype: 'Sales Order',\r\n                                                        filters: {\r\n                                                            'docstatus': 0, // Draft status\r\n                                                            'transaction_date': today\r\n                                                        },\r\n                                                        fields: ['name']\r\n                                                    },\r\n                                                    callback: function(r) {\r\n                                                        if (r.message && r.message.length > 0) {\r\n                                                            let submitCount = 0;\r\n                                                            let failedOrders = [];\r\n                                                            let totalOrders = r.message.length;\r\n                                                            \r\n                                                            // Process each order\r\n                                                            r.message.forEach(order => {\r\n                                                                // First get the full document\r\n                                                                frappe.call({\r\n                                                                    method: 'frappe.client.get',\r\n                                                                    args: {\r\n                                                                        doctype: 'Sales Order',\r\n                                                                        name: order.name\r\n                                                                    },\r\n                                                                    callback: function(doc_r) {\r\n                                                                        if (doc_r.message) {\r\n                                                                            // Now submit the full document\r\n                                                                            frappe.call({\r\n                                                                                method: \"frappe.client.submit\",\r\n                                                                                args: {\r\n                                                                                    doc: doc_r.message\r\n                                                                                },\r\n                                                                                callback: function(submit_r) {\r\n                                                                                    if (submit_r.exc) {\r\n                                                                                        failedOrders.push({\r\n                                                                                            name: order.name,\r\n                                                                                            reason: submit_r.exc\r\n                                                                                        });\r\n                                                                                    } else {\r\n                                                                                        submitCount++;\r\n                                                                                    }\r\n                                                                                    \r\n                                                                                    // Check if all orders have been processed\r\n                                                                                    if (submitCount + failedOrders.length === totalOrders) {\r\n                                                                                        let message = '';\r\n                                                                                        if (submitCount > 0) {\r\n                                                                                            message += `${submitCount} commande(s) validée(s) avec succès.\\n`;\r\n                                                                                        }\r\n                                                                                        if (failedOrders.length > 0) {\r\n                                                                                            message += `\\nCommandes non validées:\\n`;\r\n                                                                                            failedOrders.forEach(failed => {\r\n                                                                                                message += `- ${failed.name} (${failed.reason})\\n`;\r\n                                                                                            });\r\n                                                                                        }\r\n                                                                                        \r\n                                                                                        frappe.show_alert({\r\n                                                                                            message: message,\r\n                                                                                            indicator: failedOrders.length === 0 ? 'green' : 'orange'\r\n                                                                                        }, 20);\r\n                                                                                        \r\n                                                                                        // Refresh the list view\r\n                                                                                        listview.refresh();\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            });\r\n                                                                        } else {\r\n                                                                            failedOrders.push({\r\n                                                                                name: order.name,\r\n                                                                                reason: \"Could not fetch document\"\r\n                                                                            });\r\n                                                                        }\r\n                                                                    }\r\n                                                                });\r\n                                                            });\r\n                                                        } else {\r\n                                                            frappe.show_alert({\r\n                                                                message: __('Il n\\'y a pas de commandes pour aujourd\\'hui.'),\r\n                                                                indicator: 'blue'\r\n                                                            });\r\n                                                        }\r\n                                                    }\r\n                                                });\r\n                                            }\r\n                                        );\r\n                                    });\r\n                                    \r\n                                      // Add the desired class to the button\r\n                                    $(btn).addClass('btn-primary');\r\n                                    \r\n                                    // Optional: Add additional custom styling\r\n                                    $(btn).css({\r\n                                         'order': '-1',  // First position\r\n                                        'background-color': '#2490ef',  // Custom blue color\r\n                                        'color': 'white'               // White text\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('Error:', error);\r\n                frappe.show_alert({\r\n                    message: 'Error: ' + error.message,\r\n                    indicator: 'red'\r\n                });\r\n            });\r\n    }\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Trajet de Livraison",
  "enabled": 0,
  "modified": "2024-11-04 09:58:12.680673",
  "module": "Kb Distribution",
  "name": "Trajet de Livraison",
  "script": "frappe.ui.form.on('Trajet de Livraison', {\r\n    refresh: function(frm) {\r\n        // Store user coordinates globally\r\n        frm.user_coordinates = {\r\n            latitude: null,\r\n            longitude: null\r\n        };\r\n        \r\n        \r\n       // Define handleDeliveryReturn\r\n      \r\n\r\n        // Get user's location and then fetch delivery data\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                function(position) {\r\n                    frm.user_coordinates.latitude = position.coords.latitude;\r\n                    frm.user_coordinates.longitude = position.coords.longitude;\r\n                    console.log(\"Got user location:\", frm.user_coordinates);\r\n                    fetchDeliveryTripData();\r\n                },\r\n                function(error) {\r\n                    console.log(\"Geolocation error:\", error);\r\n                    // Fallback coordinates (Algeria)\r\n                    frm.user_coordinates.latitude = 35.6985752;\r\n                    frm.user_coordinates.longitude = -0.6181506;\r\n                    fetchDeliveryTripData();\r\n                }\r\n            );\r\n        } else {\r\n            // Fallback if geolocation is not available\r\n            frm.user_coordinates.latitude = 35.6985752;\r\n            frm.user_coordinates.longitude = -0.6181506;\r\n            fetchDeliveryTripData();\r\n        }\r\n\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Earth's radius in km\r\n            const dLat = (lat2 - lat1) * Math.PI / 180;\r\n            const dLon = (lon2 - lon1) * Math.PI / 180;\r\n            const a = \r\n                Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n                Math.sin(dLon/2) * Math.sin(dLon/2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n            const distance = R * c;\r\n            return Math.round(distance * 10) / 10;\r\n        };\r\n\r\n        const fetchDeliveryTripData = () => {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Delivery Trip',\r\n                    name: frm.doc.donnee_trajet\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        const deliveryTrip = response.message;\r\n                        fetchDeliveryNotes(deliveryTrip);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        const formatCurrency = (amount) => {\r\n            return frappe.format(amount, { fieldtype: 'Currency' });\r\n        };\r\n\r\n        const createDeliveryHeader = (tripData) => {\r\n            const unvisitedStops = tripData.delivery_stops.filter(stop => !stop.visited);\r\n            const totalStops = tripData.delivery_stops.length;\r\n            const progress = ((totalStops - unvisitedStops.length) / totalStops) * 100;\r\n        \r\n            const headerContainer = document.getElementById('deliveryHeader');\r\n            headerContainer.innerHTML = `\r\n                <div class=\"delivery-header\">\r\n                    <div class=\"header-title\">Trajet de Livraison: ${tripData.name}</div>\r\n                    <div class=\"header-info\">\r\n                        <div class=\"header-info-item\">\r\n                            👤 Chauffeur: ${tripData.nom_complet || 'Non assigné'}\r\n                        </div>\r\n                        <div class=\"header-info-item\">\r\n                            🚛 Véhicule: ${tripData.vehicle || 'Non assigné'}\r\n                        </div>\r\n                        <div class=\"header-info-item\">\r\n                            📅 Date: ${tripData.departure_time || 'Non assigné'}\r\n                        </div>\r\n                        <div class=\"header-info-item\">\r\n                            Status: ${tripData.status}\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"progress-bar\">\r\n                        <div class=\"progress-bar-fill\" style=\"width: ${progress}%;\"></div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        };\r\n\r\n        const fetchDeliveryNotes = (tripData) => {\r\n            const promises = tripData.delivery_stops.map(stop => {\r\n                if (stop.delivery_note) {\r\n                    return frappe.call({\r\n                        method: 'frappe.client.get',\r\n                        args: {\r\n                            doctype: 'Delivery Note',\r\n                            name: stop.delivery_note\r\n                        }\r\n                    });\r\n                }\r\n                return Promise.resolve({ message: null });\r\n            });\r\n\r\n            Promise.all(promises).then(responses => {\r\n                const deliveryNotes = responses\r\n                    .map(r => r.message)\r\n                    .filter(note => note !== null);\r\n                \r\n                const customerPromises = deliveryNotes.map(note => {\r\n                    return frappe.call({\r\n                        method: 'frappe.client.get',\r\n                        args: {\r\n                            doctype: 'Customer',\r\n                            name: note.customer\r\n                        }\r\n                    });\r\n                });\r\n\r\n                Promise.all(customerPromises).then(customerResponses => {\r\n                    const customerInfo = customerResponses.map(r => r.message);\r\n                    displayDeliveryInfo(tripData, deliveryNotes, customerInfo);\r\n                });\r\n            });\r\n        };\r\n\r\n        const createDeliveryCard = (note, customerInfo, tripData) => {\r\n            const deliveryStop = tripData.delivery_stops.find(stop => \r\n                stop.delivery_note === note.name\r\n            );\r\n            const isDelivered = deliveryStop && deliveryStop.visited;\r\n\r\n            // Calculate distance\r\n            const distance = calculateDistance(\r\n                frm.user_coordinates.latitude,\r\n                frm.user_coordinates.longitude,\r\n                parseFloat(customerInfo.geo_latitude) || 0,\r\n                parseFloat(customerInfo.geo_longitude) || 0\r\n            );\r\n\r\n            const card = document.createElement('div');\r\n            card.className = `delivery-card ${isDelivered ? 'delivered' : ''}`;\r\n            \r\n            card.innerHTML = `\r\n                <div class=\"distance-badge\" style=\"background-color: ${distance > 10 ? '#FF4444' : '#4CAF50'}\">\r\n                    ${distance} km\r\n                </div>\r\n                <div class=\"customer-name\">\r\n                    ${note.customer_name}\r\n                    ${isDelivered ? '<span class=\"delivered-tag\">✓ Livrée</span>' : ''}\r\n                </div>\r\n                <div class=\"delivery-info\">Bon de livraison: ${note.name}</div>\r\n                <div class=\"delivery-info\">N° Client: ${customerInfo.name || 'N/A'}</div>\r\n                ${!isDelivered ? '<button class=\"map-button\"><i class=\"fa fa-map-marker\"></i> Directions</button>' : ''}\r\n            `;\r\n\r\n            if (!isDelivered) {\r\n                card.addEventListener('click', () => showDeliveryModal(note, customerInfo, tripData));\r\n                \r\n                const mapButton = card.querySelector('.map-button');\r\n                if (mapButton) {\r\n                    mapButton.addEventListener('click', (e) => {\r\n                        e.stopPropagation();\r\n                        openDirections(\r\n                            frm.user_coordinates.latitude,\r\n                            frm.user_coordinates.longitude,\r\n                            customerInfo.geo_latitude,\r\n                            customerInfo.geo_longitude\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n            \r\n            return card;\r\n        };\r\n\r\nconst showDeliveryModal = (note, customerInfo, tripData) => {\r\n    const modal = document.getElementById('deliveryModal');\r\n    const modalContent = modal.querySelector('.modal-content');\r\n    \r\n    // Filter out null values and create items table\r\n    const itemsTable = note.items.map(item => `\r\n        <tr>\r\n            <td>${item.item_name || ''}</td>\r\n            <td>${item.qty || 0} ${item.uom || ''}</td>\r\n            <td>${formatCurrency(item.rate || 0)}</td>\r\n            <td>${formatCurrency(item.amount || 0)}</td>\r\n        </tr>\r\n    `).join('');\r\n    \r\n    const deliveryStop = tripData.delivery_stops.find(stop => \r\n        stop.delivery_note === note.name\r\n    );\r\n    const isDelivered = deliveryStop && deliveryStop.visited;\r\n\r\n    modalContent.innerHTML = `\r\n        <div class=\"modal-header\">\r\n            <div class=\"modal-title\">${note.customer_name || ''}</div>\r\n            <button class=\"modal-close\" onclick=\"document.getElementById('deliveryModal').classList.remove('active')\">×</button>\r\n        </div>\r\n        <div class=\"delivery-details\">\r\n            <div class=\"detail-item\">\r\n                <div class=\"detail-label\">Bon de livraison</div>\r\n                <div class=\"detail-value\">${note.name || ''}</div>\r\n            </div>\r\n            ${customerInfo.name ? `\r\n                <div class=\"detail-item\">\r\n                    <div class=\"detail-label\">N° Client</div>\r\n                    <div class=\"detail-value\">${customerInfo.name}</div>\r\n                </div>\r\n            ` : ''}\r\n            ${note.driver_name ? `\r\n                <div class=\"detail-item\">\r\n                    <div class=\"detail-label\">Chauffeur</div>\r\n                    <div class=\"detail-value\">${note.driver_name}</div>\r\n                </div>\r\n            ` : ''}\r\n            ${note.vehicle_no ? `\r\n                <div class=\"detail-item\">\r\n                    <div class=\"detail-label\">Véhicule</div>\r\n                    <div class=\"detail-value\">${note.vehicle_no}</div>\r\n                </div>\r\n            ` : ''}\r\n            ${note.lr_no ? `\r\n                <div class=\"detail-item\">\r\n                    <div class=\"detail-label\">N° Bon</div>\r\n                    <div class=\"detail-value\">${note.lr_no}</div>\r\n                </div>\r\n            ` : ''}\r\n            ${note.posting_date ? `\r\n                <div class=\"detail-item\">\r\n                    <div class=\"detail-label\">Date</div>\r\n                    <div class=\"detail-value\">${frappe.datetime.str_to_user(note.posting_date)}</div>\r\n                </div>\r\n            ` : ''}\r\n        </div>\r\n        <table class=\"items-table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Article</th>\r\n                    <th>Quantité</th>\r\n                    <th>Prix Unit.</th>\r\n                    <th>Total</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                ${itemsTable}\r\n                <tr class=\"total-row\">\r\n                    <td colspan=\"3\">Total</td>\r\n                    <td>${formatCurrency(note.grand_total || 0)}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <div class=\"modal-footer\">\r\n            ${!isDelivered ? `\r\n                <button class=\"btn btn-warning\" id=\"returnButton\">Retour Livraison & Rapport</button>\r\n                <button class=\"btn btn-primary\" id=\"deliveredButton\">Livrée & Payée</button>\r\n            ` : '<div class=\"delivered-badge\">✓ Livrée</div>'}\r\n        </div>\r\n    `;\r\n    \r\nif (!isDelivered) {\r\n    document.getElementById('returnButton').addEventListener('click', async () => {\r\n        // Create and show dialog\r\n        const d = new frappe.ui.Dialog({\r\n            title: __('Create Return & Payment Report'),\r\n            fields: [\r\n                {\r\n                    label: __('Reason'),\r\n                    fieldname: 'raison_du_rapport',\r\n                    fieldtype: 'Link',\r\n                    options: 'Raison Rapport de Paiement',\r\n                    reqd: 1\r\n                },\r\n                {\r\n                    label: __('Additional Notes'),\r\n                    fieldname: 'additional_notes',\r\n                    fieldtype: 'Long Text',\r\n                    reqd: 1\r\n                }\r\n            ],\r\n            primary_action_label: __('Create'),\r\n            primary_action: async function() {\r\n                const values = d.get_values();\r\n                \r\n                try {\r\n                    // First get the original delivery note\r\n                    const return_note_response = await frappe.call({\r\n                        method: 'frappe.client.get',\r\n                        args: {\r\n                            doctype: 'Delivery Note',\r\n                            name: note.name\r\n                        }\r\n                    });\r\n                    \r\n                    if (!return_note_response.message) {\r\n                        throw new Error('Original delivery note not found');\r\n                    }\r\n                    \r\n                    const original_note = return_note_response.message;\r\n                    \r\n                    // 1. Create and submit return delivery note\r\n                    const new_return_note = {\r\n                        doctype: 'Delivery Note',\r\n                        is_return: 1,\r\n                        return_against: note.name,\r\n                        posting_date: frappe.datetime.get_today(),\r\n                        customer: original_note.customer,\r\n                        company: original_note.company,\r\n                        items: original_note.items.map(item => ({\r\n                            item_code: item.item_code,\r\n                            qty: -Math.abs(item.qty), // Negative quantity for returns\r\n                            rate: item.rate,\r\n                            warehouse: item.warehouse,\r\n                            against_sales_order: item.against_sales_order,\r\n                            so_detail: item.so_detail\r\n                        }))\r\n                    };\r\n                    \r\n                    // Create and submit the return delivery note\r\n                    const delivery_response = await frappe.call({\r\n                        method: 'frappe.client.insert',\r\n                        args: {\r\n                            doc: new_return_note\r\n                        }\r\n                    });\r\n\r\n                    if (delivery_response.message) {\r\n                        // Submit the delivery note\r\n                        await frappe.call({\r\n                            method: 'frappe.client.submit',\r\n                            args: {\r\n                                doc: delivery_response.message\r\n                            }\r\n                        });\r\n\r\n                        // 2. Create and submit payment report\r\n                        const payment_report = {\r\n                            doctype: 'Rapport Paiement',\r\n                            raison_du_rapport: values.reason,\r\n                            note_supplémentaire: values.additional_notes,\r\n                            delivery_note: delivery_response.message.name,\r\n                            client: original_note.customer,\r\n                        };\r\n\r\n                        const payment_response = await frappe.call({\r\n                            method: 'frappe.client.insert',\r\n                            args: {\r\n                                doc: payment_report\r\n                            }\r\n                        });\r\n\r\n                        if (payment_response.message) {\r\n                            // Submit the payment report\r\n                            await frappe.call({\r\n                                method: 'frappe.client.submit',\r\n                                args: {\r\n                                    doc: payment_response.message\r\n                                }\r\n                            });\r\n\r\n                            frappe.show_alert({\r\n                                message: __('Return Delivery Note and Payment Report created successfully'),\r\n                                indicator: 'green'\r\n                            });\r\n\r\n                            // Close the dialog\r\n                            d.hide();\r\n\r\n                            // Navigate to the newly created return delivery note\r\n                            frappe.set_route('Form', 'Delivery Note', delivery_response.message.name);\r\n                        }\r\n                    }\r\n                    \r\n                } catch (error) {\r\n                    frappe.msgprint({\r\n                        title: __('Error'),\r\n                        indicator: 'red',\r\n                        message: __(`Error in process: ${error.message}`),\r\n                        wide: true\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        d.show();\r\n    });\r\n    \r\n    document.getElementById('deliveredButton').addEventListener('click', () => {\r\n        document.dispatchEvent(new CustomEvent('markDelivered', { detail: note.name }));\r\n        modal.classList.remove('active');\r\n    });\r\n}\r\n    modal.classList.add('active');\r\n};\r\n        \r\n        // Helper function to refresh delivery cards after return\r\n        const refreshDeliveryCards = () => {\r\n            // Assuming you have a main function that loads the delivery cards\r\n            // Call it here to refresh the view\r\n            loadDeliveryCards(); // You'll need to implement this or use your existing refresh function\r\n        };\r\n\r\n        const openDirections = (startLat, startLng, endLat, endLng) => {\r\n            const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n            const mapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLng}&destination=${endLat},${endLng}&travelmode=driving`;\r\n            \r\n            if (isMobile) {\r\n                window.location.href = `comgooglemaps://?saddr=${startLat},${startLng}&daddr=${endLat},${endLng}&directionsmode=driving`;\r\n                setTimeout(() => {\r\n                    window.location.href = mapsUrl;\r\n                }, 1000);\r\n            } else {\r\n                window.open(mapsUrl, '_blank');\r\n            }\r\n        };\r\n        \r\n\r\n        const displayDeliveryInfo = (tripData, deliveryNotes, customerInfo) => {\r\n            createDeliveryHeader(tripData);\r\n\r\n            const container = document.getElementById('deliveryCards');\r\n            container.innerHTML = '';\r\n\r\n            deliveryNotes.forEach((note, index) => {\r\n                const card = createDeliveryCard(note, customerInfo[index], tripData);\r\n                container.appendChild(card);\r\n            });\r\n\r\n            // Close modal when clicking outside\r\n            document.getElementById('deliveryModal').addEventListener('click', (e) => {\r\n                if (e.target.classList.contains('modal-overlay')) {\r\n                    e.target.classList.remove('active');\r\n                }\r\n            });\r\n\r\n            // Handle delivery marking\r\n            document.addEventListener('markDelivered', (e) => {\r\n                const deliveryNote = deliveryNotes.find(note => note.name === e.detail);\r\n                if (deliveryNote) {\r\n                    updateDeliveryStatus(tripData, deliveryNote);\r\n                    document.getElementById('deliveryModal').classList.remove('active');\r\n                }\r\n            });\r\n        };\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Trip",
  "enabled": 1,
  "modified": "2024-11-04 09:58:12.707002",
  "module": "Kb Distribution",
  "name": "Service de Livraison Automatique pour livreur",
  "script": "frappe.ui.form.on('Delivery Trip', {\r\n    before_submit: function(frm) {\r\n        console.log(\"Before save triggered\");\r\n        console.log(\"Document name:\", frm.doc.name);\r\n        console.log(\"Assigner à:\", frm.doc.assigner_à);\r\n        \r\n        // Only proceed if the document has a name (means it's not new)\r\n        if (!frm.doc.name || frm.doc.name.includes('new')) {\r\n            console.log(\"New document, skipping\");\r\n            return;\r\n        }\r\n\r\n        // Check if a delivery route already exists\r\n        frappe.db.get_list('Trajet de Livraison', {\r\n            filters: {\r\n                'donnee_trajet': frm.doc.name\r\n            },\r\n            fields: ['name']\r\n        }).then(function(records) {\r\n            console.log(\"Records found:\", records);\r\n            \r\n            if (records.length > 0) {\r\n                // Update existing delivery route\r\n                frappe.db.set_value('Trajet de Livraison', records[0].name, {\r\n                    utilisateur: frm.doc.assigner_à\r\n                }).then(function(r) {\r\n                    frappe.show_alert({\r\n                        message: 'Trajet de livraison mis à jour avec succès',\r\n                        indicator: 'blue'\r\n                    }, 5);\r\n                });\r\n            } else {\r\n                // Create new delivery route\r\n                frappe.db.insert({\r\n                    doctype: 'Trajet de Livraison',\r\n                    donnee_trajet: frm.doc.name,\r\n                    utilisateur: frm.doc.assigner_à\r\n                }).then(function(doc) {\r\n                    frappe.show_alert({\r\n                        message: 'Trajet de livraison créé avec succès',\r\n                        indicator: 'blue'\r\n                    }, 5);\r\n                });\r\n            }\r\n        }).catch(function(err) {\r\n            console.error(\"Error in before_save:\", err);\r\n            frappe.show_alert({\r\n                message: 'Erreur: ' + err,\r\n                indicator: 'red'\r\n            });\r\n        });\r\n    },\r\n    \r\n    after_save: function(frm) {\r\n        console.log(\"After save triggered\");\r\n    },\r\n    \r\n    validate: function(frm) {\r\n        console.log(\"Validate triggered\");\r\n    },\r\n    \r\n    after_cancel: function(frm) {\r\n        console.log(\"After cancel triggered\");\r\n        \r\n        // Find and delete associated delivery route\r\n        frappe.db.get_list('Trajet de Livraison', {\r\n            filters: {\r\n                'donnee_trajet': frm.doc.name\r\n            },\r\n            fields: ['name']\r\n        }).then(function(records) {\r\n            console.log(\"Records trouvés:\", records);\r\n            \r\n            if (records && records.length > 0) {\r\n                console.log(\"Tentative de suppression de:\", records[0].name);\r\n                \r\n                // Try to delete directly without getting the doc first\r\n                frappe.db.delete_doc('Trajet de Livraison', records[0].name)\r\n                    .then(function() {\r\n                        console.log(\"Suppression réussie\");\r\n                        frappe.show_alert({\r\n                            message: 'Trajet de livraison supprimé avec succès',\r\n                            indicator: 'blue'\r\n                        }, 5);\r\n                    })\r\n                    .catch(function(err) {\r\n                        console.error(\"Erreur lors de la suppression:\", err);\r\n                        frappe.show_alert({\r\n                            message: 'Erreur lors de la suppression: ' + err,\r\n                            indicator: 'red'\r\n                        });\r\n                    });\r\n            } else {\r\n                console.log(\"Aucun trajet trouvé à supprimer\");\r\n                frappe.show_alert({\r\n                    message: 'Aucun trajet de livraison trouvé à supprimer',\r\n                    indicator: 'orange'\r\n                }, 5);\r\n            }\r\n        }).catch(function(err) {\r\n            console.error(\"Erreur lors de la recherche:\", err);\r\n            frappe.show_alert({\r\n                message: 'Erreur lors de la recherche: ' + err,\r\n                indicator: 'red'\r\n            });\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Trajet de Livraison",
  "enabled": 1,
  "modified": "2024-11-04 09:58:12.728562",
  "module": "Kb Distribution",
  "name": "Trajet de Livraison Filter par Assigner à",
  "script": "frappe.listview_settings['Trajet de Livraison'] = {\r\n    onload: function(listview) {\r\n        // Vérifier si l'utilisateur a le rôle System Manager\r\n        let isSystemManager = frappe.user.has_role('System Manager');\r\n\r\n        if (!isSystemManager) {\r\n            // Ajout d'un filtre par défaut pour l'utilisateur courant\r\n            listview.page.add_inner_button(__('Mes Trajets'), function() {\r\n                listview.filter_area.clear();\r\n                listview.filter_area.add([\r\n                    [\"Trajet de Livraison\", \"utilisateur\", \"=\", frappe.session.user]\r\n                ]);\r\n            });\r\n\r\n            // Appliquer le filtre automatiquement au chargement\r\n            listview.filter_area.clear();\r\n            listview.filter_area.add([\r\n                [\"Trajet de Livraison\", \"utilisateur\", \"=\", frappe.session.user]\r\n            ]);\r\n        }\r\n    },\r\n\r\n    // Filtre par défaut uniquement si pas System Manager\r\n    get_filters_for_default_charts: function() {\r\n        let isSystemManager = frappe.user.has_role('System Manager');\r\n        \r\n        if (!isSystemManager) {\r\n            return [[\"utilisateur\", \"=\", frappe.session.user]];\r\n        }\r\n        return [];\r\n    }\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Trajet de Livraison",
  "enabled": 1,
  "modified": "2024-11-04 09:58:12.634844",
  "module": "Kb Distribution",
  "name": "test",
  "script": "frappe.ui.form.on('Trajet de Livraison', {\r\n    refresh: function(frm) {\r\n        // Store user coordinates globally\r\n        frm.user_coordinates = {\r\n            latitude: null,\r\n            longitude: null\r\n        };\r\n        \r\n        \r\n       // Define handleDeliveryReturn\r\n      \r\n\r\n        // Get user's location and then fetch delivery data\r\n        if (\"geolocation\" in navigator) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                function(position) {\r\n                    frm.user_coordinates.latitude = position.coords.latitude;\r\n                    frm.user_coordinates.longitude = position.coords.longitude;\r\n                    console.log(\"Got user location:\", frm.user_coordinates);\r\n                    fetchDeliveryTripData();\r\n                },\r\n                function(error) {\r\n                    console.log(\"Geolocation error:\", error);\r\n                    // Fallback coordinates (Algeria)\r\n                    frm.user_coordinates.latitude = 35.6985752;\r\n                    frm.user_coordinates.longitude = -0.6181506;\r\n                    fetchDeliveryTripData();\r\n                }\r\n            );\r\n        } else {\r\n            // Fallback if geolocation is not available\r\n            frm.user_coordinates.latitude = 35.6985752;\r\n            frm.user_coordinates.longitude = -0.6181506;\r\n            fetchDeliveryTripData();\r\n        }\r\n\r\n        const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n            const R = 6371; // Earth's radius in km\r\n            const dLat = (lat2 - lat1) * Math.PI / 180;\r\n            const dLon = (lon2 - lon1) * Math.PI / 180;\r\n            const a = \r\n                Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \r\n                Math.sin(dLon/2) * Math.sin(dLon/2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n            const distance = R * c;\r\n            return Math.round(distance * 10) / 10;\r\n        };\r\n\r\n        const fetchDeliveryTripData = () => {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Delivery Trip',\r\n                    name: frm.doc.donnee_trajet\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        const deliveryTrip = response.message;\r\n                        fetchDeliveryNotes(deliveryTrip);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        const formatCurrency = (amount) => {\r\n            return frappe.format(amount, { fieldtype: 'Currency' });\r\n        };\r\n\r\nconst createDeliveryHeader = (tripData) => {\r\n    // Count different types of stops\r\n    const totalStops = tripData.delivery_stops.length;\r\n    const visitedStops = tripData.delivery_stops.filter(stop => stop.visited).length;\r\n    const returnedStops = tripData.delivery_stops.filter(stop => stop.returned).length;\r\n    const completedStops = visitedStops + returnedStops;\r\n    \r\n    // Calculate total value of completed deliveries\r\n    const completedValue = tripData.delivery_stops\r\n        .filter(stop => stop.visited)\r\n        .reduce((total, stop) => total + (stop.grand_total || 0), 0);\r\n    \r\n    // Calculate progress percentage\r\n    const progress = (completedStops / totalStops) * 100;\r\n    \r\n    const headerContainer = document.getElementById('deliveryHeader');\r\n    headerContainer.innerHTML = `\r\n        <div style=\"\r\n            background-color: #ffffff;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n            padding: 20px;\r\n            margin-bottom: 20px;\r\n        \">\r\n            <div style=\"\r\n                font-size: 1.5rem;\r\n                font-weight: bold;\r\n                color: #1a1a1a;\r\n                margin-bottom: 15px;\r\n            \">Trajet de Livraison: ${tripData.name}</div>\r\n            \r\n            <div style=\"\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n                gap: 20px;\r\n                margin-bottom: 15px;\r\n            \">\r\n                <div style=\"\r\n                    display: flex;\r\n                    align-items: center;\r\n                    font-size: 1rem;\r\n                    color: #4a5568;\r\n                \">\r\n                    👤 Chauffeur: ${tripData.nom_complet || 'Non assigné'}\r\n                </div>\r\n                <div style=\"\r\n                    display: flex;\r\n                    align-items: center;\r\n                    font-size: 1rem;\r\n                    color: #4a5568;\r\n                \">\r\n                    🚛 Véhicule: ${tripData.vehicle || 'Non assigné'}\r\n                </div>\r\n                <div style=\"\r\n                    display: flex;\r\n                    align-items: center;\r\n                    font-size: 1rem;\r\n                    color: #4a5568;\r\n                \">\r\n                    📅 Date: ${tripData.departure_time || 'Non assigné'}\r\n                </div>\r\n            </div>\r\n            \r\n            <div style=\"\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n                gap: 25px;\r\n                margin-bottom: 20px;\r\n                padding: 15px;\r\n                background-color: #f7fafc;\r\n                border-radius: 6px;\r\n            \">\r\n                <div style=\"\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    align-items: center;\r\n                \">\r\n                    <span style=\"font-size: 0.9rem; color: #718096;\">Livrés:</span>\r\n                    <span style=\"\r\n                        font-size: 1.2rem;\r\n                        font-weight: bold;\r\n                        color: #48bb78;\r\n                    \">${visitedStops}</span>\r\n                </div>\r\n                <div style=\"\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    align-items: center;\r\n                \">\r\n                    <span style=\"font-size: 0.9rem; color: #718096;\">Retournés:</span>\r\n                    <span style=\"\r\n                        font-size: 1.2rem;\r\n                        font-weight: bold;\r\n                        color: #ed8936;\r\n                    \">${returnedStops}</span>\r\n                </div>\r\n                <div style=\"\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    align-items: center;\r\n                \">\r\n                    <span style=\"font-size: 0.9rem; color: #718096;\">Complétés:</span>\r\n                    <span style=\"\r\n                        font-size: 1.2rem;\r\n                        font-weight: bold;\r\n                        color: #4299e1;\r\n                    \">${completedStops}/${totalStops}</span>\r\n                </div>\r\n                <div style=\"\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    align-items: center;\r\n                \">\r\n                    <span style=\"font-size: 0.9rem; color: #718096;\">Total Livré:</span>\r\n                    <span style=\"\r\n                        font-size: 1.2rem;\r\n                        font-weight: bold;\r\n                        color: #2c5282;\r\n                    \">${formatCurrency(completedValue)}</span>\r\n                </div>\r\n            </div>\r\n            \r\n            <div style=\"\r\n                background-color: #edf2f7;\r\n                border-radius: 4px;\r\n                height: 20px;\r\n                overflow: hidden;\r\n                position: relative;\r\n            \">\r\n                <div style=\"\r\n                    background-color: #4299e1;\r\n                    height: 100%;\r\n                    width: ${progress}%;\r\n                    transition: width 0.3s ease;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                \">\r\n                    <span style=\"\r\n                        color: white;\r\n                        font-size: 0.8rem;\r\n                        font-weight: bold;\r\n                    \">${Math.round(progress)}%</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `;\r\n};\r\n\r\n        const fetchDeliveryNotes = (tripData) => {\r\n            const promises = tripData.delivery_stops.map(stop => {\r\n                if (stop.delivery_note) {\r\n                    return frappe.call({\r\n                        method: 'frappe.client.get',\r\n                        args: {\r\n                            doctype: 'Delivery Note',\r\n                            name: stop.delivery_note\r\n                        }\r\n                    });\r\n                }\r\n                return Promise.resolve({ message: null });\r\n            });\r\n\r\n            Promise.all(promises).then(responses => {\r\n                const deliveryNotes = responses\r\n                    .map(r => r.message)\r\n                    .filter(note => note !== null);\r\n                \r\n                const customerPromises = deliveryNotes.map(note => {\r\n                    return frappe.call({\r\n                        method: 'frappe.client.get',\r\n                        args: {\r\n                            doctype: 'Customer',\r\n                            name: note.customer\r\n                        }\r\n                    });\r\n                });\r\n\r\n                Promise.all(customerPromises).then(customerResponses => {\r\n                    const customerInfo = customerResponses.map(r => r.message);\r\n                    displayDeliveryInfo(tripData, deliveryNotes, customerInfo);\r\n                });\r\n            });\r\n        };\r\n\r\n        const createDeliveryCard = (note, customerInfo, tripData) => {\r\n            const deliveryStop = tripData.delivery_stops.find(stop => \r\n                stop.delivery_note === note.name\r\n            );\r\n            const isDelivered = deliveryStop && deliveryStop.visited;\r\n            const isReturned = deliveryStop && deliveryStop.returned;\r\n        \r\n            // Calculate distance\r\n            const distance = calculateDistance(\r\n                frm.user_coordinates.latitude,\r\n                frm.user_coordinates.longitude,\r\n                parseFloat(customerInfo.geo_latitude) || 0,\r\n                parseFloat(customerInfo.geo_longitude) || 0\r\n            );\r\n        \r\n            const card = document.createElement('div');\r\n            card.className = `delivery-card ${isDelivered ? 'delivered' : ''} ${isReturned ? 'returned' : ''}`;\r\n            \r\n            card.innerHTML = `\r\n                <div class=\"distance-badge\" style=\"background-color: ${distance > 10 ? '#FF4444' : '#4CAF50'}\">\r\n                    ${distance} km\r\n                </div>\r\n                <div class=\"customer-name\">\r\n                    ${note.customer_name}\r\n                    ${isDelivered ? '<span class=\"delivered-tag\">✓ Livrée</span>' : ''}\r\n                    ${isReturned ? '<span class=\"returned-tag\">⟲ Retournée</span>' : ''}\r\n                </div>\r\n                <div class=\"delivery-info\">Bon de livraison: ${note.name}</div>\r\n                <div class=\"delivery-info\">N° Client: ${customerInfo.name || 'N/A'}</div>\r\n                ${(!isDelivered && !isReturned) ? '<button class=\"map-button\"><i class=\"fa fa-map-marker\"></i> Directions</button>' : ''}\r\n            `;\r\n        \r\n            // Only add click event if not delivered and not returned\r\n            if (!isDelivered && !isReturned) {\r\n                card.addEventListener('click', () => showDeliveryModal(note, customerInfo, tripData));\r\n                \r\n                const mapButton = card.querySelector('.map-button');\r\n                if (mapButton) {\r\n                    mapButton.addEventListener('click', (e) => {\r\n                        e.stopPropagation();\r\n                        openDirections(\r\n                            frm.user_coordinates.latitude,\r\n                            frm.user_coordinates.longitude,\r\n                            customerInfo.geo_latitude,\r\n                            customerInfo.geo_longitude\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n            \r\n            return card;\r\n        };\r\n    \r\n    \r\n        const showDeliveryModal = (note, customerInfo, tripData) => {\r\n        const modal = document.getElementById('deliveryModal');\r\n        const modalContent = modal.querySelector('.modal-content');\r\n        \r\n        // Filter out null values and create items table\r\n        const itemsTable = note.items.map(item => `\r\n            <tr>\r\n                <td>${item.item_name || ''}</td>\r\n                <td>${item.qty || 0} ${item.uom || ''}</td>\r\n                <td>${formatCurrency(item.rate || 0)}</td>\r\n                <td>${formatCurrency(item.amount || 0)}</td>\r\n            </tr>\r\n        `).join('');\r\n        \r\n        const deliveryStop = tripData.delivery_stops.find(stop => \r\n            stop.delivery_note === note.name\r\n        );\r\n        const isDelivered = deliveryStop && deliveryStop.visited;\r\n    \r\n        modalContent.innerHTML = `\r\n            <div class=\"modal-header\">\r\n                <div class=\"modal-title\">${note.customer_name || ''}</div>\r\n                <button class=\"modal-close\" onclick=\"document.getElementById('deliveryModal').classList.remove('active')\">×</button>\r\n            </div>\r\n            <div class=\"delivery-details\">\r\n                <div class=\"detail-item\">\r\n                    <div class=\"detail-label\">Bon de livraison</div>\r\n                    <div class=\"detail-value\">${note.name || ''}</div>\r\n                </div>\r\n                ${customerInfo.name ? `\r\n                    <div class=\"detail-item\">\r\n                        <div class=\"detail-label\">N° Client</div>\r\n                        <div class=\"detail-value\">${customerInfo.name}</div>\r\n                    </div>\r\n                ` : ''}\r\n                ${note.driver_name ? `\r\n                    <div class=\"detail-item\">\r\n                        <div class=\"detail-label\">Chauffeur</div>\r\n                        <div class=\"detail-value\">${note.driver_name}</div>\r\n                    </div>\r\n                ` : ''}\r\n                ${note.vehicle_no ? `\r\n                    <div class=\"detail-item\">\r\n                        <div class=\"detail-label\">Véhicule</div>\r\n                        <div class=\"detail-value\">${note.vehicle_no}</div>\r\n                    </div>\r\n                ` : ''}\r\n                ${note.lr_no ? `\r\n                    <div class=\"detail-item\">\r\n                        <div class=\"detail-label\">N° Bon</div>\r\n                        <div class=\"detail-value\">${note.lr_no}</div>\r\n                    </div>\r\n                ` : ''}\r\n                ${note.posting_date ? `\r\n                    <div class=\"detail-item\">\r\n                        <div class=\"detail-label\">Date</div>\r\n                        <div class=\"detail-value\">${frappe.datetime.str_to_user(note.posting_date)}</div>\r\n                    </div>\r\n                ` : ''}\r\n            </div>\r\n            <table class=\"items-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Article</th>\r\n                        <th>Quantité</th>\r\n                        <th>Prix Unit.</th>\r\n                        <th>Total</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    ${itemsTable}\r\n                    <tr class=\"total-row\">\r\n                        <td colspan=\"3\">Total</td>\r\n                        <td>${formatCurrency(note.grand_total || 0)}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <div class=\"modal-footer\">\r\n                ${!isDelivered ? `\r\n                    <button class=\"btn btn-warning\" id=\"returnButton\">Retour Livraison & Rapport</button>\r\n                    <button class=\"btn btn-primary\" id=\"deliveredButton\">Livrée & Payée</button>\r\n                ` : '<div class=\"delivered-badge\">✓ Livrée</div>'}\r\n            </div>\r\n        `;\r\n        \r\n        if (!isDelivered) {\r\n            // Return button handler remains the same\r\n            document.getElementById('returnButton').addEventListener('click', async () => {\r\n                // Create and show dialog\r\n            const d = new frappe.ui.Dialog({\r\n                title: __('Create Return & Payment Report'),\r\n                fields: [\r\n                    {\r\n                        label: __('Reason'),\r\n                        fieldname: 'raison_du_rapport',\r\n                        fieldtype: 'Link',\r\n                        options: 'Raison Rapport de Paiement',\r\n                        reqd: 1\r\n                    },\r\n                    {\r\n                        label: __('Additional Notes'),\r\n                        fieldname: 'additional_notes',\r\n                        fieldtype: 'Long Text',\r\n                        reqd: 1\r\n                    }\r\n                ],\r\n                primary_action_label: __('Create'),\r\n                primary_action: async function() {\r\n                    const values = d.get_values();\r\n                    \r\n                    try {\r\n                        // First get the original delivery note\r\n                        const return_note_response = await frappe.call({\r\n                            method: 'frappe.client.get',\r\n                            args: {\r\n                                doctype: 'Delivery Note',\r\n                                name: note.name\r\n                            }\r\n                        });\r\n                        \r\n                        if (!return_note_response.message) {\r\n                            throw new Error('Original delivery note not found');\r\n                        }\r\n                        \r\n                        const original_note = return_note_response.message;\r\n                        \r\n                        // Create return delivery note without submitting\r\n                        const new_return_note = {\r\n                            doctype: 'Delivery Note',\r\n                            is_return: 1,\r\n                            return_against: note.name,\r\n                            posting_date: frappe.datetime.get_today(),\r\n                            customer: original_note.customer,\r\n                            company: original_note.company,\r\n                            items: original_note.items.map(item => ({\r\n                                item_code: item.item_code,\r\n                                qty: -Math.abs(item.qty), // Negative quantity for returns\r\n                                rate: item.rate,\r\n                                warehouse: item.warehouse,\r\n                                against_sales_order: item.against_sales_order,\r\n                                so_detail: item.so_detail\r\n                            }))\r\n                        };\r\n                        \r\n                        // Create the return delivery note without submitting\r\n                        const delivery_response = await frappe.call({\r\n                            method: 'frappe.client.insert',\r\n                            args: {\r\n                                doc: new_return_note\r\n                            }\r\n                        });\r\n\r\n                        if (delivery_response.message) {\r\n                            // Update delivery stop card's returned status\r\n                            await frappe.call({\r\n                                method: 'frappe.client.set_value',\r\n                                args: {\r\n                                    doctype: 'Delivery Stop',\r\n                                    name: deliveryStop.name,  // Use the deliveryStop from the outer scope\r\n                                    fieldname: 'returned',\r\n                                    value: 1\r\n                                }\r\n                            });\r\n\r\n                            console.log('Delivery Stop returned status updated:', {\r\n                                delivery_stop: deliveryStop.name,\r\n                                returned: true\r\n                            });\r\n\r\n                            frappe.show_alert({\r\n                                message: __('Return Delivery Note created successfully'),\r\n                                indicator: 'green'\r\n                            });\r\n                            \r\n                                    // Refresh the page or relevant components\r\n                            if (typeof refreshDeliveryList === 'function') {\r\n                                refreshDeliveryList();\r\n                            } else {\r\n                                window.location.reload();\r\n                            }\r\n\r\n                            // Close the dialog\r\n                            d.hide();\r\n                            \r\n                            // Close the modal\r\n                            modal.classList.remove('active');\r\n\r\n                            \r\n                        }\r\n                        \r\n                    } catch (error) {\r\n                        frappe.msgprint({\r\n                            title: __('Error'),\r\n                            indicator: 'red',\r\n                            message: __(`Error in process: ${error.message}`),\r\n                            wide: true\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            d.show();\r\n            });\r\n            \r\n            // Updated delivery button handler\r\n            document.getElementById('deliveredButton').addEventListener('click', async () => {\r\n                try {\r\n                    // Only update the delivery stop status\r\n                    await frappe.call({\r\n                        method: 'frappe.client.set_value',\r\n                        args: {\r\n                            doctype: 'Delivery Stop',\r\n                            name: deliveryStop.name,\r\n                            fieldname: {\r\n                                visited: 1,\r\n                                completion_time: frappe.datetime.now_datetime()\r\n                            }\r\n                        }\r\n                    });\r\n    \r\n                    // Show success message\r\n                    frappe.show_alert({\r\n                        message: __('Delivery marked as completed'),\r\n                        indicator: 'green'\r\n                    });\r\n    \r\n                    // Trigger the custom event for any other components that need to update\r\n                    document.dispatchEvent(new CustomEvent('deliveryCompleted', { \r\n                        detail: {\r\n                            deliveryNote: note.name,\r\n                            deliveryStop: deliveryStop.name\r\n                        }\r\n                    }));\r\n    \r\n                    // Close the modal\r\n                    modal.classList.remove('active');\r\n    \r\n                    // Refresh the page or relevant components\r\n                    if (typeof refreshDeliveryList === 'function') {\r\n                        refreshDeliveryList();\r\n                    } else {\r\n                        window.location.reload();\r\n                    }\r\n    \r\n                } catch (error) {\r\n                    frappe.msgprint({\r\n                        title: __('Error'),\r\n                        indicator: 'red',\r\n                        message: __(`Error marking delivery as completed: ${error.message}`),\r\n                        wide: true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        \r\n        modal.classList.add('active');\r\n    };\r\n        \r\n        // Helper function to refresh delivery cards after return\r\n        const refreshDeliveryCards = () => {\r\n            // Assuming you have a main function that loads the delivery cards\r\n            // Call it here to refresh the view\r\n            loadDeliveryCards(); // You'll need to implement this or use your existing refresh function\r\n        };\r\n\r\n        const openDirections = (startLat, startLng, endLat, endLng) => {\r\n            const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n            const mapsUrl = `https://www.google.com/maps/dir/?api=1&origin=${startLat},${startLng}&destination=${endLat},${endLng}&travelmode=driving`;\r\n            \r\n            if (isMobile) {\r\n                window.location.href = `comgooglemaps://?saddr=${startLat},${startLng}&daddr=${endLat},${endLng}&directionsmode=driving`;\r\n                setTimeout(() => {\r\n                    window.location.href = mapsUrl;\r\n                }, 1000);\r\n            } else {\r\n                window.open(mapsUrl, '_blank');\r\n            }\r\n        };\r\n        \r\n\r\n        const displayDeliveryInfo = (tripData, deliveryNotes, customerInfo) => {\r\n            createDeliveryHeader(tripData);\r\n\r\n            const container = document.getElementById('deliveryCards');\r\n            container.innerHTML = '';\r\n\r\n            deliveryNotes.forEach((note, index) => {\r\n                const card = createDeliveryCard(note, customerInfo[index], tripData);\r\n                container.appendChild(card);\r\n            });\r\n\r\n            // Close modal when clicking outside\r\n            document.getElementById('deliveryModal').addEventListener('click', (e) => {\r\n                if (e.target.classList.contains('modal-overlay')) {\r\n                    e.target.classList.remove('active');\r\n                }\r\n            });\r\n\r\n            // Handle delivery marking\r\n            document.addEventListener('markDelivered', (e) => {\r\n                const deliveryNote = deliveryNotes.find(note => note.name === e.detail);\r\n                if (deliveryNote) {\r\n                    updateDeliveryStatus(tripData, deliveryNote);\r\n                    document.getElementById('deliveryModal').classList.remove('active');\r\n                }\r\n            });\r\n        };\r\n    }\r\n});",
  "view": "Form"
 }
]