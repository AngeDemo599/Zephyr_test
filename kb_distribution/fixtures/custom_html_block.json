[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<button id=\"create-invoice-btn\" style=\"padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;\">\r\n    NOUVELLE PRE COMMANDE\r\n</button>",
  "modified": "2024-10-20 14:44:49.555183",
  "name": "Nouvelle pre commande",
  "private": 0,
  "roles": [],
  "script": "let button = root_element.querySelector('#create-invoice-btn');\r\n\r\n    // Add an event listener to the button to handle the click event\r\n    button.addEventListener('click', function() {\r\n        window.location.href = '/app/client-listing/new';\r\n    });",
  "style": null
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"sales-orders-container\">\r\n    <h2>Commandes du jour</h2>\r\n    <div class=\"scroll-container\">\r\n        <table class=\"sales-order-list\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"order-col\">Commande</th>\r\n                    <th class=\"date-col\">Date</th>\r\n                    <th class=\"total-col\">Total</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody id=\"sales-order-tbody\">\r\n                <!-- Sales Orders will be populated here -->\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>",
  "modified": "2024-10-24 09:07:05.743821",
  "name": "commande client list",
  "private": 0,
  "roles": [
   {
    "parent": "commande client list",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "Pré-Vendeur"
   }
  ],
  "script": "function fetchSalesOrders() {\r\n    const currentDate = new Date().toISOString().split('T')[0];\r\n    \r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Sales Order\",\r\n            filters: {\r\n                owner: frappe.session.user,\r\n                transaction_date: currentDate\r\n            },\r\n            fields: [\"name\", \"customer_name\", \"transaction_date\", \"grand_total\"],\r\n            limit_page_length: 10\r\n        },\r\n        callback: function(response) {\r\n            const salesOrders = response.message;\r\n            const listContainer = root_element.querySelector('#sales-order-tbody');\r\n            listContainer.innerHTML = '';\r\n\r\n            if (salesOrders && salesOrders.length > 0) {\r\n                salesOrders.forEach(function(order) {\r\n                    const row = document.createElement('tr');\r\n                    \r\n                    row.innerHTML = `\r\n                        <td>\r\n                            <span class=\"order-number\">${order.name}</span>\r\n                            <span class=\"client-name\">${order.customer_name}</span>\r\n                            <div class=\"item-details\">\r\n                                <ul class=\"item-list\" id=\"items-${order.name}\">\r\n                                    <li>Chargement des articles...</li>\r\n                                </ul>\r\n                            </div>\r\n                        </td>\r\n                        <td>${formatDate(order.transaction_date)}</td>\r\n                        <td><span class=\"total-amount\">${formatCurrency(order.grand_total)}</span></td>\r\n                    `;\r\n                    \r\n                    listContainer.appendChild(row);\r\n                    fetchOrderItems(order.name);\r\n                });\r\n            } else {\r\n                listContainer.innerHTML = `\r\n                    <tr>\r\n                        <td colspan=\"3\" class=\"no-orders\">\r\n                            Aucune commande trouvée pour aujourd'hui.\r\n                        </td>\r\n                    </tr>\r\n                `;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction fetchOrderItems(orderName) {\r\n    frappe.call({\r\n        method: \"frappe.client.get\",\r\n        args: {\r\n            doctype: \"Sales Order\",\r\n            name: orderName,\r\n            fields: [\"items\"]\r\n        },\r\n        callback: function(itemResponse) {\r\n            const items = itemResponse.message.items;\r\n            const itemsList = root_element.querySelector(`#items-${orderName}`);\r\n            \r\n            if (Array.isArray(items) && items.length > 0) {\r\n                itemsList.innerHTML = items.map(item => `\r\n                    <li>\r\n                        <span class=\"item-name\">${item.item_name}</span>\r\n                        <span class=\"item-qty\">Qté: ${item.qty}</span>\r\n                    </li>\r\n                `).join('');\r\n            } else {\r\n                itemsList.innerHTML = '<li>Aucun article trouvé</li>';\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction formatDate(dateString) {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString('fr-FR', options);\r\n}\r\n\r\nfunction formatCurrency(amount) {\r\n    return new Intl.NumberFormat('fr-DZ', {\r\n        style: 'currency',\r\n        currency: 'DZD',\r\n        minimumFractionDigits: 2\r\n    }).format(amount);\r\n}\r\n\r\n// Initialize the table\r\nfetchSalesOrders();",
  "style": ".sales-orders-container {\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    padding: 20px;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n}\r\n\r\n.scroll-container {\r\n    overflow-x: auto;\r\n    box-shadow: 0 0 15px rgba(0,0,0,0.1);\r\n    border-radius: 8px;\r\n    margin-top: 20px;\r\n}\r\n\r\n.sales-order-list {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    background-color: white;\r\n    table-layout: fixed;\r\n}\r\n\r\n.sales-order-list th {\r\n    background-color: #2c3e50;\r\n    color: white;\r\n    padding: 15px;\r\n    text-align: left;\r\n    font-weight: 600;\r\n    position: sticky;\r\n    top: 0;\r\n}\r\n\r\n.sales-order-list td {\r\n    padding: 15px;\r\n    border-bottom: 1px solid #eee;\r\n    vertical-align: top;\r\n}\r\n\r\n.sales-order-list tr:hover {\r\n    background-color: #f8f9fa;\r\n}\r\n\r\n.order-col { width: 50%; }\r\n.date-col { width: 25%; }\r\n.total-col { width: 25%; }\r\n\r\n.order-number {\r\n    font-weight: 600;\r\n    color: #2c3e50;\r\n    margin-bottom: 5px;\r\n    display: block;\r\n}\r\n\r\n.client-name {\r\n    color: #666;\r\n    font-size: 0.9em;\r\n    margin-bottom: 8px;\r\n    display: block;\r\n}\r\n\r\n.item-details {\r\n    font-size: 0.85em;\r\n    color: #555;\r\n    line-height: 1.4;\r\n}\r\n\r\n.item-list {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.item-list li {\r\n    margin-bottom: 4px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.item-name { flex: 1; }\r\n.item-qty {\r\n    margin-left: 10px;\r\n    color: #666;\r\n}\r\n\r\n.total-amount {\r\n    font-weight: 600;\r\n    color: #2c3e50;\r\n}\r\n\r\n.no-orders {\r\n    text-align: center;\r\n    padding: 30px;\r\n    color: #666;\r\n}"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"sales-orders-container\">\r\n    <h2>Commandes du jour</h2>\r\n    <div class=\"scroll-container\">\r\n        <table class=\"sales-order-list\">\r\n            <thead>\r\n                <tr>\r\n                    <th class=\"order-col\">Commande</th>\r\n                    <th class=\"total-col\">Total</th>\r\n                    <th class=\"action-col\">Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody id=\"sales-order-tbody\">\r\n                <!-- Sales Orders will be populated here -->\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>",
  "modified": "2024-10-28 00:14:30.269320",
  "name": "test_commande jours",
  "private": 0,
  "roles": [
   {
    "parent": "test_commande jours",
    "parentfield": "roles",
    "parenttype": "Custom HTML Block",
    "role": "Pré-Vendeur"
   }
  ],
  "script": "// Function to fetch sales orders\r\nfunction fetchSalesOrders() {\r\n    const currentDate = new Date().toISOString().split('T')[0];\r\n    \r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Sales Order\",\r\n            filters: {\r\n                owner: frappe.session.user,\r\n                transaction_date: currentDate\r\n            },\r\n            fields: [\"name\", \"customer_name\", \"delivery_date\", \"grand_total\"],\r\n            limit_page_length: 50\r\n        },\r\n        callback: function(response) {\r\n            const salesOrders = response.message;\r\n            const listContainer = root_element.querySelector('#sales-order-tbody');\r\n            listContainer.innerHTML = '';\r\n            if (salesOrders && salesOrders.length > 0) {\r\n                salesOrders.forEach(function(order) {\r\n                    const row = document.createElement('tr');\r\n                    \r\n                    row.innerHTML = `\r\n                        <td>\r\n                            <span class=\"order-number\">${order.name}</span>\r\n                            <span class=\"client-name\">${order.customer_name}</span>\r\n                            <span class=\"client-name\">${formatDate(order.delivery_date)}</span>\r\n                            <div class=\"item-details\">\r\n                                <ul class=\"item-list\" id=\"items-${order.name}\">\r\n                                    <li>Chargement des articles...</li>\r\n                                </ul>\r\n                            </div>\r\n                        </td>\r\n                        <td><span class=\"total-amount\">${formatCurrency(order.grand_total)}</span></td>\r\n                        <td>\r\n                            <button class=\"print-button\" \r\n                                    onclick=\"\r\n                                        const orderName = '${order.name}';  // Use dynamic order name\r\n                                        const printUrl = '/printview?doctype=Sales%20Order'\r\n                                            + '&name=' + encodeURIComponent(orderName)\r\n                                            + '&trigger_print=1'\r\n                                            + '&no_letterhead=1'\r\n                                            + '&letterhead=No%20Letterhead'\r\n                                            + '&settings=%7B%7D'\r\n                                            + '&_lang=fr';\r\n                                        window.open(printUrl, '_blank');\r\n                                    \" \r\n                                    style=\"background-color: #000; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;\">\r\n                                Imprimer\r\n                            </button>\r\n                        </td>\r\n                    `;\r\n                    \r\n                    listContainer.appendChild(row);\r\n                    fetchOrderItems(order.name);\r\n                });\r\n            } else {\r\n                listContainer.innerHTML = `\r\n                    <tr>\r\n                        <td colspan=\"4\" class=\"no-orders\">\r\n                            Aucune commande trouvée pour aujourd'hui.\r\n                        </td>\r\n                    </tr>\r\n                `;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction fetchOrderItems(orderName) {\r\n    frappe.call({\r\n        method: \"frappe.client.get\",\r\n        args: {\r\n            doctype: \"Sales Order\",\r\n            name: orderName,\r\n            fields: [\"items\"]\r\n        },\r\n        callback: function(itemResponse) {\r\n            const items = itemResponse.message.items;\r\n            const itemsList = root_element.querySelector(`#items-${orderName}`);\r\n            \r\n            if (Array.isArray(items) && items.length > 0) {\r\n                itemsList.innerHTML = items.map(item => `\r\n                    <li>\r\n                        <span class=\"item-name\">${item.item_name}</span>\r\n                        <span class=\"item-qty\">Qté: ${item.qty}</span>\r\n                    </li>\r\n                `).join('');\r\n            } else {\r\n                itemsList.innerHTML = '<li>Aucun article trouvé</li>';\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction formatDate(dateString) {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString('fr-FR', options);\r\n}\r\n\r\nfunction formatCurrency(amount) {\r\n    return new Intl.NumberFormat('fr-DZ', {\r\n        style: 'currency',\r\n        currency: 'DZD',\r\n        minimumFractionDigits: 2\r\n    }).format(amount);\r\n}\r\n\r\n// Initialize the table\r\nfetchSalesOrders();\r\n",
  "style": ".sales-orders-container {\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n}\r\n\r\n.scroll-container {\r\n    overflow-x: auto;\r\n    border-radius: 8px;\r\n    margin-top: 20px;\r\n}\r\n\r\n.sales-order-list {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    background-color: white;\r\n    table-layout: fixed;\r\n}\r\n\r\n.sales-order-list th {\r\n    background-color: #000;\r\n    color: white;\r\n    padding: 10px; /* Reduced padding */\r\n    text-align: left;\r\n    font-weight: 600;\r\n    position: sticky;\r\n    top: 0;\r\n}\r\n\r\n.sales-order-list td {\r\n    padding: 10px; /* Reduced padding */\r\n    border-bottom: 1px solid #eee;\r\n    vertical-align: top;\r\n}\r\n\r\n.sales-order-list tr:hover {\r\n    background-color: #0000;\r\n}\r\n\r\n.order-col { width: 40%; }\r\n.date-col { width: 20%; }\r\n.total-col { width: 20%; }\r\n.action-col { width: 20%; }\r\n\r\n.order-number {\r\n    font-weight: 600;\r\n    color: #2c3e50;\r\n    margin-bottom: 3px; /* Reduced margin */\r\n    display: block;\r\n    font-size: 0.95em; /* Slightly smaller font */\r\n}\r\n\r\n.client-name {\r\n    color: #666;\r\n    font-size: 0.85em; /* Slightly smaller font */\r\n    margin-bottom: 5px; /* Reduced margin */\r\n    display: block;\r\n}\r\n\r\n.item-details {\r\n    font-size: 0.8em; /* Smaller font for item details */\r\n    color: #555;\r\n    line-height: 1.3; /* Reduced line height */\r\n}\r\n\r\n.item-list {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.item-list li {\r\n    margin-bottom: 3px; /* Reduced margin */\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.item-name { \r\n    flex: 1; \r\n}\r\n\r\n.item-qty {\r\n    margin-left: 5px; /* Reduced margin */\r\n    color: #666;\r\n}\r\n\r\n.total-amount {\r\n    font-weight: 600;\r\n    color: #2c3e50;\r\n}\r\n\r\n.no-orders {\r\n    text-align: center;\r\n    padding: 20px; /* Reduced padding */\r\n    color: #666;\r\n}\r\n\r\n.print-button {\r\n    background-color: #0000;\r\n    color: white;\r\n    border: none;\r\n    padding: 6px 12px; /* Reduced padding */\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 0.85em; /* Slightly smaller font */\r\n    transition: background-color 0.3s;\r\n}\r\n\r\n.print-button:hover {\r\n    background-color: #34495e;\r\n}\r\n\r\n@media print {\r\n    .no-print {\r\n        display: none;\r\n    }\r\n    .sales-order-print {\r\n        display: block !important;\r\n    }\r\n}\r\n\r\n/* Media Queries for mobile */\r\n@media (max-width: 768px) {\r\n    .sales-order-list th, .sales-order-list td {\r\n        width: fit-content;\r\n        padding: 5px; /* Further reduce padding for mobile */\r\n    }\r\n    \r\n    .order-number, .client-name {\r\n        font-size: 0.8em; /* Smaller font for mobile */\r\n    }\r\n\r\n    .item-details {\r\n        font-size: 0.75em; /* Smaller font for item details */\r\n    }\r\n    \r\n    .print-button {\r\n        padding: 5px 10px; /* Smaller button padding */\r\n        font-size: 0.75em; /* Smaller button font */\r\n    }\r\n}\r\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "\n<div class=\"delivery-routes-container\">\n    <h2>Trajets de Livraison</h2>\n    <div class=\"scroll-container\">\n        <table class=\"delivery-routes-list\">\n            <thead>\n                <tr>\n                    <th class=\"route-col\">Trajet</th>\n                    <th class=\"details-col\">Détails</th>\n                    <th class=\"action-col\">Actions</th>\n                </tr>\n            </thead>\n            <tbody id=\"delivery-routes-tbody\">\n                <!-- Delivery Routes will be populated here -->\n            </tbody>\n        </table>\n    </div>\n</div>",
  "modified": "2024-11-02 15:38:19.029497",
  "name": "Trajet Livraison listing",
  "private": 0,
  "roles": [],
  "script": "// Function to fetch delivery routes filtered by current user\r\nfunction fetchDeliveryRoutes() {\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Trajet de Livraison\",\r\n            filters: [\r\n                [\"donnee_trajet\", \"is\", \"set\"],\r\n                [\"utilisateur\", \"=\", frappe.session.user]  // Filter by current user\r\n            ],\r\n            fields: [\"name\", \"donnee_trajet\", \"utilisateur\"],\r\n            limit_page_length: 50\r\n        },\r\n        callback: function(response) {\r\n            const deliveryRoutes = response.message;\r\n            const listContainer = root_element.querySelector('#delivery-routes-tbody');\r\n            listContainer.innerHTML = '';\r\n            \r\n            if (!deliveryRoutes?.length) {\r\n                displayNoRoutes('Aucun trajet de livraison trouvé pour cet utilisateur.');\r\n                return;\r\n            }\r\n\r\n            // Debug information\r\n            console.log('Current user:', frappe.session.user);\r\n            console.log('Found routes:', deliveryRoutes);\r\n\r\n            // Process routes\r\n            Promise.all(deliveryRoutes.map(fetchDeliveryTripDetails))\r\n                .then(processedRoutes => {\r\n                    const validRoutes = processedRoutes.filter(Boolean);\r\n\r\n                    if (!validRoutes.length) {\r\n                        displayNoRoutes('Aucun trajet de livraison trouvé.');\r\n                        return;\r\n                    }\r\n\r\n                    renderRoutesList(validRoutes, listContainer);\r\n                })\r\n                .catch(error => {\r\n                    console.error(\"Error processing delivery routes:\", error);\r\n                    displayNoRoutes('Erreur lors du chargement des trajets de livraison.');\r\n                });\r\n        },\r\n        error: function(err) {\r\n            console.error(\"Error fetching delivery routes:\", err);\r\n            displayNoRoutes('Erreur de connexion.');\r\n        }\r\n    });\r\n}\r\n\r\n// Function to fetch delivery trip details\r\nfunction fetchDeliveryTripDetails(route) {\r\n    return new Promise((resolve) => {\r\n        if (!route.donnee_trajet) {\r\n            resolve(null);\r\n            return;\r\n        }\r\n\r\n        frappe.call({\r\n            method: \"frappe.client.get\",\r\n            args: {\r\n                doctype: \"Delivery Trip\",\r\n                name: route.donnee_trajet,\r\n                fields: [\"name\", \"posting_date\", \"vehicle\", \"driver\", \"status\"]\r\n            },\r\n            callback: function(tripResponse) {\r\n                const tripData = tripResponse.message;\r\n                \r\n                if (!tripData) {\r\n                    resolve(null);\r\n                    return;\r\n                }\r\n\r\n                resolve({\r\n                    name: route.name,\r\n                    formattedDate: formatDate(tripData.posting_date),\r\n                    vehicle: tripData.vehicle,\r\n                    driver: tripData.driver,\r\n                    status: tripData.status,\r\n                    utilisateur: route.utilisateur\r\n                });\r\n            },\r\n            error: function(err) {\r\n                console.error(\"Error fetching Delivery Trip details:\", err);\r\n                resolve(null);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// Render function for the routes list\r\nfunction renderRoutesList(routes, container) {\r\n    routes.forEach(routeData => {\r\n        const row = document.createElement('tr');\r\n        row.classList.add('route-row');\r\n        \r\n        row.innerHTML = `\r\n            <td>\r\n                <span class=\"route-number\">${frappe.utils.escape_html(routeData.name)}</span>\r\n                <span class=\"route-date\">${frappe.utils.escape_html(routeData.formattedDate)}</span>\r\n                <div class=\"route-details\">\r\n                    <ul class=\"route-info-list\">\r\n                        <li>\r\n                            <span class=\"detail-label\">Véhicule:</span> \r\n                            <span class=\"detail-value\">${frappe.utils.escape_html(routeData.vehicle || 'Non spécifié')}</span>\r\n                        </li>\r\n                        <li>\r\n                            <span class=\"detail-label\">Chauffeur:</span> \r\n                            <span class=\"detail-value\">${frappe.utils.escape_html(routeData.driver || 'Non assigné')}</span>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </td>\r\n            <td>\r\n                <span class=\"route-status ${routeData.status?.toLowerCase() || ''}\">${\r\n                    frappe.utils.escape_html(routeData.status || 'Statut inconnu')\r\n                }</span>\r\n            </td>\r\n            <td>\r\n                <button class=\"view-route-button\" \r\n                        onclick=\"openDeliveryRouteDetail('${frappe.utils.escape_html(routeData.name)}')\">\r\n                    Voir Détails\r\n                </button>\r\n            </td>\r\n        `;\r\n        \r\n        row.addEventListener('click', () => openDeliveryRouteDetail(routeData.name));\r\n        \r\n        container.appendChild(row);\r\n    });\r\n}\r\n\r\nfunction displayNoRoutes(message) {\r\n    const listContainer = root_element.querySelector('#delivery-routes-tbody');\r\n    listContainer.innerHTML = `\r\n        <tr>\r\n            <td colspan=\"3\" class=\"no-routes\">\r\n                ${frappe.utils.escape_html(message)}\r\n            </td>\r\n        </tr>\r\n    `;\r\n}\r\n\r\nfunction openDeliveryRouteDetail(routeName) {\r\n    frappe.set_route('Form', 'Trajet de Livraison', routeName);\r\n}\r\n\r\nfunction formatDate(dateString) {\r\n    if (!dateString) return 'Date non disponible';\r\n    \r\n    try {\r\n        const date = new Date(dateString);\r\n        if (isNaN(date.getTime())) throw new Error('Invalid date');\r\n        \r\n        const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n        return date.toLocaleDateString('fr-FR', options);\r\n    } catch (error) {\r\n        console.error('Error formatting date:', error);\r\n        return 'Date invalide';\r\n    }\r\n}\r\n\r\n// Initialize the table\r\nfetchDeliveryRoutes();",
  "style": ".delivery-routes-container {\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    max-width: 100%;\r\n    margin: 0 auto;\r\n}\r\n\r\n.scroll-container {\r\n    overflow-x: auto;\r\n    border-radius: 8px;\r\n    margin-top: 20px;\r\n}\r\n\r\n.delivery-routes-list {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    background-color: white;\r\n    table-layout: fixed;\r\n}\r\n\r\n.delivery-routes-list th {\r\n    background-color: #000;\r\n    color: white;\r\n    padding: 10px;\r\n    text-align: left;\r\n    font-weight: 600;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 10;\r\n}\r\n\r\n.delivery-routes-list td {\r\n    padding: 10px;\r\n    border-bottom: 1px solid #eee;\r\n    vertical-align: top;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease;\r\n}\r\n\r\n.delivery-routes-list tr:hover {\r\n    background-color: #f4f4f4;\r\n}\r\n\r\n.route-col { width: 50%; }\r\n.details-col { width: 25%; }\r\n.action-col { width: 25%; }\r\n\r\n.route-number {\r\n    font-weight: 600;\r\n    color: #2c3e50;\r\n    margin-bottom: 5px;\r\n    display: block;\r\n    font-size: 0.95em;\r\n}\r\n\r\n.route-date {\r\n    color: #666;\r\n    font-size: 0.85em;\r\n    margin-bottom: 5px;\r\n    display: block;\r\n}\r\n\r\n.route-details {\r\n    font-size: 0.8em;\r\n    color: #555;\r\n    line-height: 1.3;\r\n}\r\n\r\n.route-info-list {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n}\r\n\r\n.route-info-list li {\r\n    margin-bottom: 3px;\r\n    display: flex;\r\n}\r\n\r\n.detail-label {\r\n    font-weight: 600;\r\n    margin-right: 5px;\r\n    color: #34495e;\r\n}\r\n\r\n.route-status {\r\n    display: inline-block;\r\n    padding: 3px 8px;\r\n    border-radius: 4px;\r\n    font-size: 0.8em;\r\n}\r\n\r\n.route-status.brouillon { background-color: #f1c40f; color: white; }\r\n.route-status.termine { background-color: #2ecc71; color: white; }\r\n.route-status.annule { background-color: #e74c3c; color: white; }\r\n\r\n.view-route-button {\r\n    background-color: #000;\r\n    color: white;\r\n    border: none;\r\n    padding: 6px 12px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 0.85em;\r\n    transition: background-color 0.3s;\r\n}\r\n\r\n.view-route-button:hover {\r\n    background-color: #34495e;\r\n}\r\n\r\n.no-routes {\r\n    text-align: center;\r\n    padding: 20px;\r\n    color: #666;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .delivery-routes-list th, .delivery-routes-list td {\r\n        width: fit-content;\r\n        padding: 5px;\r\n    }\r\n    \r\n    .route-number, .route-date {\r\n        font-size: 0.8em;\r\n    }\r\n\r\n    .route-details {\r\n        font-size: 0.75em;\r\n    }\r\n    \r\n    .view-route-button {\r\n        padding: 5px 10px;\r\n        font-size: 0.75em;\r\n    }\r\n}"
 }
]